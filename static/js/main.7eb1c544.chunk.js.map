{"version":3,"sources":["components/Quote.js","components/QuoteContainer.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","id","quote","author","onClick","randomQuote","href","QuoteContainer","state","a","fetch","response","json","data","setState","content","componentDidMount","this","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAgCeA,G,MAbD,SAAAC,GAAK,OACf,yBAAKC,GAAG,aACJ,yBAAKA,GAAG,QACHD,EAAME,OAEX,yBAAKD,GAAG,UACHD,EAAMG,QAEX,4BAAQF,GAAG,YAAYG,QAASJ,EAAMK,aAAtC,aACA,uBAAGC,KAAK,2BAA2BL,GAAG,eAAtC,kBCgCOM,E,4MAvDPC,MAAM,CACFN,MAAM,GACNC,OAAO,I,EAGfE,Y,sBAAc,8BAAAI,EAAA,sEACaC,MAAM,kCADnB,cACJC,EADI,gBAESA,EAASC,OAFlB,OAEJC,EAFI,OAGV,EAAKC,SAAS,CACVZ,MAAMW,EAAKE,QACXZ,OAAOU,EAAKV,SALN,2C,EAQda,kBAAoB,WAChB,EAAKX,e,uDAIL,OACQ,kBAAC,EAAD,CAAQA,YAAaY,KAAKZ,YAClBH,MAAOe,KAAKT,MAAMN,MAClBC,OAAQc,KAAKT,MAAML,a,GAvBde,IAAMC,WCSpBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7eb1c544.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Quote.css';\r\n\r\n// class Quote extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <div id=\"quote-box\">\r\n//                 <div id=\"text\">\r\n//                     {this.props.quote}\r\n//                 </div>\r\n//                 <div id=\"author\">\r\n//                     {this.props.author}\r\n//                 </div>\r\n//                 <button id=\"new-quote\" onClick={this.props.randomQuote}>New Quote</button>\r\n//                 <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">Tweet Quote</a>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\nconst Quote = props => (\r\n    <div id=\"quote-box\">\r\n        <div id=\"text\">\r\n            {props.quote}\r\n        </div>\r\n        <div id=\"author\">\r\n            {props.author}\r\n        </div>\r\n        <button id=\"new-quote\" onClick={props.randomQuote}>New Quote</button>\r\n        <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">Tweet Quote</a>\r\n    </div>\r\n);\r\n\r\nexport default Quote;","import React from 'react';\r\nimport Quote from './Quote';\r\n\r\nclass QuoteContainer extends React.Component{\r\n\r\n        state={\r\n            quote:'',\r\n            author:''\r\n        }\r\n\r\n    randomQuote = async ()=> {\r\n        const response = await fetch('https://api.quotable.io/random')\r\n        const data = await response.json();\r\n        this.setState({\r\n            quote:data.content,\r\n            author:data.author\r\n        })\r\n    }\r\n    componentDidMount = ()=>{\r\n        this.randomQuote();\r\n    }\r\n\r\n    render(){\r\n        return (\r\n                <Quote  randomQuote={this.randomQuote}\r\n                        quote={this.state.quote}\r\n                        author={this.state.author}/>\r\n        )\r\n    }\r\n}\r\n// class QuoteContainer extends React.Component{\r\n//     constructor(props){\r\n//         super(props);\r\n//         this.state={\r\n//             quote:'',\r\n//             author:''\r\n//         }\r\n//         this.randomQuote=this.randomQuote.bind(this);\r\n//     }\r\n//     async randomQuote() {\r\n//         const response = await fetch('https://api.quotable.io/random')\r\n//         const data = await response.json();\r\n//         this.setState({\r\n//             quote:data.content,\r\n//             author:data.author\r\n//         })\r\n//     }\r\n//     componentDidMount(){\r\n//         this.randomQuote();\r\n//     }\r\n\r\n//     render(){\r\n//         return (\r\n//                 <Quote  randomQuote={this.randomQuote}\r\n//                         quote={this.state.quote}\r\n//                         author={this.state.author}/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default QuoteContainer;","import React from 'react';\nimport './App.css';\nimport QuoteContainer from './components/QuoteContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}